(define (exp base n)
    (define (iter x result)
        (if (= x 0)
            result
            (iter (- x 1) (* base result))
          )
      )
    (iter n 1)
  )

(define (count-0-remainder-devisions n devider)
    (define (iter try-exp)
        (if (= (remainder n (exp devider try-exp)) 0)
            (iter (+ try-exp 1))
            (- try-exp 1)
          )
      )
    (iter 1)
  )

(define (mycons x y)
    (* (exp 2 x) (exp 3 y))
  )

(define (mycar x)
    (count-0-remainder-devisions x 2)
  )

(define (mycdr x)
    (count-0-remainder-devisions x 3)
  )

(define (print-items items)
    (newline)
    (display "(")
    (display (mycar items))
    (display ",")
    (display (mycdr items))
    (display ")")
  )
